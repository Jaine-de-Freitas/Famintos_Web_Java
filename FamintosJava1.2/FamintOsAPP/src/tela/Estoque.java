/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tela;

import DAO.EstoqueDAO;
import DAO.UsuarioDAO;
import DTO.EstoqueDTO;
import DTO.UsuarioDTO;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author jaine
 */
public class Estoque extends javax.swing.JFrame {

    /**
     * Creates new form Estoque
     */
    public Estoque() {
        initComponents();
        adicionar.setEnabled(true);
        alterar.setEnabled(false);
        excluir.setEnabled(false);
        qtdOPR.setVisible(false);
        novaQTD.setVisible(false);
        txtQuantidade.setSize(220, 30);
        FiltrarEstoque();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtQuantidade = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtNomeProduto = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtCategoria = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        adicionar = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtUser = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        excluir = new javax.swing.JButton();
        alterar = new javax.swing.JButton();
        permitirA = new javax.swing.JRadioButton();
        permitirE = new javax.swing.JRadioButton();
        Opcoes = new javax.swing.JComboBox<>();
        pesquisar = new javax.swing.JButton();
        txtPesquisar = new javax.swing.JFormattedTextField();
        txtVencimento = new javax.swing.JFormattedTextField();
        txtLote = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaProdutos = new javax.swing.JTable();
        txtValor = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        qtdOPR = new javax.swing.JComboBox<>();
        novaQTD = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gerenciamento de Estoque");
        setMinimumSize(new java.awt.Dimension(1344, 620));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 0, 0));
        jPanel1.setLayout(null);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/famintos.png"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 40, 1310, 50);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Quantidade");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(280, 450, 240, 29);

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Vencimento");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(280, 230, 220, 29);

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Valor (und)");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(280, 340, 240, 29);

        txtQuantidade.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        txtQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantidadeActionPerformed(evt);
            }
        });
        jPanel1.add(txtQuantidade);
        txtQuantidade.setBounds(280, 490, 110, 30);

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Produto");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(40, 230, 190, 29);

        txtNomeProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeProdutoActionPerformed(evt);
            }
        });
        jPanel1.add(txtNomeProduto);
        txtNomeProduto.setBounds(40, 270, 220, 30);

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Lote");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(40, 340, 190, 29);

        txtCategoria.setEditable(false);
        txtCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar", "Secos", "Carnes e Frios", "Bebidas", "Molhos", "Sorveteria", "Hortifruti" }));
        txtCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCategoriaActionPerformed(evt);
            }
        });
        jPanel1.add(txtCategoria);
        txtCategoria.setBounds(40, 490, 220, 30);

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Categoria");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(40, 450, 190, 29);

        adicionar.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        adicionar.setText("ADICIONAR");
        adicionar.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                adicionarAncestorRemoved(evt);
            }
        });
        adicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarActionPerformed(evt);
            }
        });
        jPanel1.add(adicionar);
        adicionar.setBounds(240, 540, 130, 29);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText(" Conectado como");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(0, 100, 640, 30);

        txtUser.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtUser.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(txtUser);
        txtUser.setBounds(650, 100, 660, 30);

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("_________________________________");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(0, 160, 550, 29);

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("ADICIONAR AO ESTOQUE");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(0, 150, 550, 29);

        excluir.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        excluir.setText("EXCLUIR CADASTROS");
        excluir.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                excluirAncestorRemoved(evt);
            }
        });
        excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirActionPerformed(evt);
            }
        });
        jPanel1.add(excluir);
        excluir.setBounds(1070, 540, 210, 29);

        alterar.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        alterar.setText("ALTERAR ");
        alterar.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                alterarAncestorRemoved(evt);
            }
        });
        alterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarActionPerformed(evt);
            }
        });
        jPanel1.add(alterar);
        alterar.setBounds(380, 540, 130, 29);

        permitirA.setBackground(new java.awt.Color(255, 0, 0));
        permitirA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        permitirA.setForeground(new java.awt.Color(255, 255, 255));
        permitirA.setText("Permitir edição de cadastros");
        permitirA.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                permitirAItemStateChanged(evt);
            }
        });
        jPanel1.add(permitirA);
        permitirA.setBounds(580, 540, 220, 30);

        permitirE.setBackground(new java.awt.Color(255, 0, 0));
        permitirE.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        permitirE.setForeground(new java.awt.Color(255, 255, 255));
        permitirE.setText("Permitir exclusão de cadastros");
        permitirE.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                permitirEItemStateChanged(evt);
            }
        });
        jPanel1.add(permitirE);
        permitirE.setBounds(810, 540, 220, 25);

        Opcoes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Não filtrar", "Vencimento", "Quantidade", "Produto", "Categoria", "Lote" }));
        Opcoes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpcoesItemStateChanged(evt);
            }
        });
        Opcoes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpcoesMouseClicked(evt);
            }
        });
        jPanel1.add(Opcoes);
        Opcoes.setBounds(920, 140, 140, 30);

        pesquisar.setText("OK");
        pesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarActionPerformed(evt);
            }
        });
        jPanel1.add(pesquisar);
        pesquisar.setBounds(1230, 140, 70, 30);

        txtPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPesquisarKeyTyped(evt);
            }
        });
        jPanel1.add(txtPesquisar);
        txtPesquisar.setBounds(1070, 140, 150, 30);

        try {
            txtVencimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jPanel1.add(txtVencimento);
        txtVencimento.setBounds(280, 270, 220, 30);

        txtLote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLoteActionPerformed(evt);
            }
        });
        jPanel1.add(txtLote);
        txtLote.setBounds(40, 380, 220, 30);

        tabelaProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Produto", "Categoria", "Lote", "Vencimento", "Quantidade", "Preço", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaProdutos.setFocusable(false);
        tabelaProdutos.setRowSelectionAllowed(false);
        tabelaProdutos.getTableHeader().setReorderingAllowed(false);
        tabelaProdutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaProdutosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaProdutos);
        if (tabelaProdutos.getColumnModel().getColumnCount() > 0) {
            tabelaProdutos.getColumnModel().getColumn(0).setResizable(false);
            tabelaProdutos.getColumnModel().getColumn(1).setResizable(false);
            tabelaProdutos.getColumnModel().getColumn(2).setResizable(false);
            tabelaProdutos.getColumnModel().getColumn(3).setResizable(false);
            tabelaProdutos.getColumnModel().getColumn(4).setResizable(false);
            tabelaProdutos.getColumnModel().getColumn(5).setResizable(false);
            tabelaProdutos.getColumnModel().getColumn(6).setResizable(false);
            tabelaProdutos.getColumnModel().getColumn(7).setResizable(false);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(522, 182, 790, 340);
        jPanel1.add(txtValor);
        txtValor.setBounds(280, 380, 220, 30);

        jButton1.setText("MENU");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(1140, 10, 70, 23);

        jButton3.setText("SAIR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(1220, 10, 80, 23);

        qtdOPR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar", "+ (Entrada)", "- (Saida)" }));
        jPanel1.add(qtdOPR);
        qtdOPR.setBounds(390, 490, 110, 30);
        jPanel1.add(novaQTD);
        novaQTD.setBounds(280, 490, 110, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1334, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtNomeProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeProdutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeProdutoActionPerformed

    private void txtCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCategoriaActionPerformed

    private void adicionarAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_adicionarAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_adicionarAncestorRemoved

    private void adicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarActionPerformed
        Adicionar();

    }//GEN-LAST:event_adicionarActionPerformed

    private void excluirAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_excluirAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_excluirAncestorRemoved

    private void excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirActionPerformed
        exclusao();
    }//GEN-LAST:event_excluirActionPerformed

    private void alterarAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_alterarAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_alterarAncestorRemoved

    private void alterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarActionPerformed
        Alterar();
    }//GEN-LAST:event_alterarActionPerformed

    private void permitirAItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_permitirAItemStateChanged
        boolean estado = permitirA.isSelected();
        if (estado == true) {
            jLabel11.setText("ALTERAR NO ESTOQUE");
            permitirE.setSelected(false);
            adicionar.setEnabled(false);
            excluir.setEnabled(false);
            alterar.setEnabled(true);
            tabelaProdutos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            qtdOPR.setVisible(true);
            novaQTD.setVisible(true);
            txtQuantidade.setVisible(false);
            txtQuantidade.setSize(110, 30);
            txtQuantidade.setEditable(false);
            selecionarLinha();
            LimparCampos();
        } else if (estado == false) {
            jLabel11.setText("ADICIONAR AO ESTOQUE");
            excluir.setEnabled(false);
            alterar.setEnabled(false);
            adicionar.setEnabled(true);
            qtdOPR.setVisible(false);
            novaQTD.setVisible(false);
            txtQuantidade.setVisible(true);
            txtQuantidade.setSize(220, 30);
            txtQuantidade.setEditable(true);
            selecionarLinha();
            LimparCampos();
        }
    }//GEN-LAST:event_permitirAItemStateChanged

    private void permitirEItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_permitirEItemStateChanged
        boolean estado = permitirE.isSelected();
        if (estado == true) {
            tabelaProdutos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            permitirA.setSelected(false);
            adicionar.setEnabled(false);
            alterar.setEnabled(false);
            excluir.setEnabled(true);
            selecionarLinha();
            LimparCampos();
            tabelaProdutos.getColumnModel().getColumn(7).setMinWidth(20);
            tabelaProdutos.getColumnModel().getColumn(7).setMaxWidth(20);
            tabelaProdutos.getColumnModel().getColumn(7).setPreferredWidth(20);
        } else if (estado == false) {
            tabelaProdutos.getColumnModel().getColumn(7).setMinWidth(0);
            tabelaProdutos.getColumnModel().getColumn(7).setMaxWidth(0);
            tabelaProdutos.getColumnModel().getColumn(7).setPreferredWidth(0);
            excluir.setEnabled(false);
            alterar.setEnabled(false);
            adicionar.setEnabled(true);
            for (int n = 0; n < tabelaProdutos.getRowCount(); n++) {
                tabelaProdutos.setValueAt(false, n, 7);
            }
            selecionarLinha();
            LimparCampos();

        }
    }//GEN-LAST:event_permitirEItemStateChanged

    private void OpcoesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpcoesItemStateChanged
        if (Opcoes.getSelectedItem().toString().equals("Não filtrar") || Opcoes.getSelectedItem().toString().equals("Vencimento") || Opcoes.getSelectedItem().toString().equals("Quantidade")) {
            txtPesquisar.setText("");
            FiltrarEstoque();
        }
    }//GEN-LAST:event_OpcoesItemStateChanged

    private void OpcoesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpcoesMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_OpcoesMouseClicked

    private void pesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarActionPerformed
        /*if (Opcoes.getSelectedItem().toString().equals("Não filtrar") || Opcoes.getSelectedItem().toString().equals("Vencimento") || Opcoes.getSelectedItem().toString().equals("Quantidade")) {
            FiltrarEstoque();
        } else if (txtPesquisar.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Preencha o campo de pesquisa!");
        } else {
            FiltrarEstoque();
        }*/
    }//GEN-LAST:event_pesquisarActionPerformed

    private void txtLoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLoteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLoteActionPerformed

    private void txtQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantidadeActionPerformed

    private void tabelaProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaProdutosMouseClicked
        boolean estado = permitirA.isSelected();
        if (estado == true) {
            MandarLinha();
        }
    }//GEN-LAST:event_tabelaProdutosMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String Nome = txtUser.getText();
        Menu mn = new Menu();
        mn.txtUsuario.setText(Nome);
        mn.setVisible(true);
        mn.chamar();
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtPesquisarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarKeyTyped
        FiltrarEstoque();
    }//GEN-LAST:event_txtPesquisarKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Estoque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Estoque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Estoque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Estoque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Estoque().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Opcoes;
    public javax.swing.JButton adicionar;
    public javax.swing.JButton alterar;
    public javax.swing.JButton excluir;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField novaQTD;
    private javax.swing.JRadioButton permitirA;
    private javax.swing.JRadioButton permitirE;
    private javax.swing.JButton pesquisar;
    private javax.swing.JComboBox<String> qtdOPR;
    public javax.swing.JTable tabelaProdutos;
    private javax.swing.JComboBox<String> txtCategoria;
    private javax.swing.JTextField txtLote;
    private javax.swing.JTextField txtNomeProduto;
    private javax.swing.JFormattedTextField txtPesquisar;
    private javax.swing.JTextField txtQuantidade;
    public javax.swing.JLabel txtUser;
    private javax.swing.JTextField txtValor;
    private javax.swing.JFormattedTextField txtVencimento;
    // End of variables declaration//GEN-END:variables

    private void Adicionar() {
        String produto, categoria, lote, vencimento, preco, quantidade;
        produto = txtNomeProduto.getText();
        categoria = txtCategoria.getSelectedItem().toString();
        lote = txtLote.getText().toUpperCase();
        vencimento = txtVencimento.getText();
        preco = txtValor.getText();
        quantidade = txtQuantidade.getText();
        int teste = 1;

        String prc = preco.replaceAll("[0-9.]", "");
        String qtd = quantidade.replaceAll("[0-9]", "");

        if ((produto.isEmpty()) || (categoria.isEmpty()) || (vencimento.isEmpty()) || (lote.isEmpty() || (preco.isEmpty()) || (quantidade.isEmpty()))) {
            JOptionPane.showMessageDialog(null, "Preencha todos os campos obrigatórios!");
        } else if (lote.length() < 4 || lote.length() > 12) {
            JOptionPane.showMessageDialog(null, "Lote digitado é inválido!");
        } else {
            String confirmar = vencimento.replaceAll("[^0-9]+", "");
            String dia = confirmar.substring(0, 2);
            String mes = confirmar.substring(2, 4);
            String ano = confirmar.substring(4, 8);
            String vencFormt = ano + "-" + mes + "-" + dia;
            if (Integer.parseInt(mes) < 0 || Integer.parseInt(mes) > 12 || Integer.parseInt(dia) < 0 || Integer.parseInt(dia) > 31) {
                JOptionPane.showMessageDialog(null, "Data de vencimento é inválida!");
            } else if (categoria.equals("Selecionar")) {
                JOptionPane.showMessageDialog(null, "Selecione uma categoria!");
            } else if (qtd.length() != 0) {
                JOptionPane.showMessageDialog(null, "Campo quantidade contém valor inválido!");
            } else if (prc.length() != 0) {
                JOptionPane.showMessageDialog(null, "Campo valor contém carctere inválido!");
            } else {
                EstoqueDTO estqDTO = new EstoqueDTO();
                estqDTO.setLote(lote);

                EstoqueDAO estqDAO = new EstoqueDAO();
                ResultSet rsuserdao = estqDAO.checkLote(estqDTO);
                try {
                    if (rsuserdao.next()) {
                        String lotes = rsuserdao.getString(4);
                        if (lotes.equals(lote)) {
                            JOptionPane.showMessageDialog(null, "Lote já cadastrado! É preferível alterar as informações para o lote/produto já existente");
                            teste = 2;
                        }
                    }
                } catch (SQLException erro) {
                    JOptionPane.showMessageDialog(null, erro);
                }
                if (teste == 1) {
                    String pgm;
                    if (preco.replaceAll("[0-9].", "").length() < 0) {
                        JOptionPane.showMessageDialog(null, "Campo valor inválido!");
                    } else {
                        pgm = preco;
                        Date dataHoraAtual = new Date();
                        String data2 = new SimpleDateFormat("yyyy-MM-dd").format(dataHoraAtual);
                        String hora = new SimpleDateFormat("HH:mm:ss").format(dataHoraAtual);

                        String dBanco = data2 + " " + hora;

                        EstoqueDAO estDAO = new EstoqueDAO();
                        EstoqueDTO estDTO = new EstoqueDTO();

                        estDTO.setCategoria(categoria);
                        estDTO.setLote(lote);
                        estDTO.setPreco(pgm);
                        estDTO.setProduto(produto);
                        estDTO.setQuantidade(Integer.parseInt(quantidade));
                        estDTO.setVencimento(vencFormt);
                        estDTO.setData_cadastro(dBanco);

                        estDAO.adicionarProduto(estDTO);
                        ResultSet rsuserdao2 = estDAO.pgID(estDTO);
                        try {
                            if (rsuserdao2.next()) {
                                estDTO.setId_p_tbl(rsuserdao2.getDouble(1));
                            }
                        } catch (SQLException erro) {
                            JOptionPane.showMessageDialog(null, erro);
                        }
                        estDAO.gestao_estq(estDTO);

                        JOptionPane.showMessageDialog(null, "Produto adicionado com sucesso!");

                        Opcoes.setSelectedIndex(0);
                        FiltrarEstoque();
                        LimparCampos();
                    }
                }
            }
        }
    }

    private void Alterar() {
        String produto, categoria, lote, vencimento, preco, quantidade,operacao;
        int qtd_tbl;
        produto = txtNomeProduto.getText();
        categoria = txtCategoria.getSelectedItem().toString();
        operacao = qtdOPR.getSelectedItem().toString();
        lote = txtLote.getText().toUpperCase();
        vencimento = txtVencimento.getText();
        preco = txtValor.getText();
        quantidade = novaQTD.getText();
        int teste = 1;

        String prc = preco.replaceAll("[0-9R$,.]", "");
        String qtd = quantidade.replaceAll("[0-9]", "");

        int linha = tabelaProdutos.getSelectedRow();
        if (linha != -1) {
            String qtdNaLinha = String.valueOf(tabelaProdutos.getValueAt(linha, 5));
            Object ids = tabelaProdutos.getValueAt(linha, 0);
            qtd_tbl=(int) tabelaProdutos.getValueAt(linha, 5);
            double recId = (double) ids;

            if ((produto.isEmpty()) || (categoria.isEmpty()) || (vencimento.isEmpty()) || (lote.isEmpty()) || (preco.isEmpty()) || (quantidade.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Preencha todos os campos obrigatórios!");
            }else if(txtCategoria.getSelectedItem().toString().equals("Selecionar")){
                JOptionPane.showMessageDialog(null, "Selecione uma categoria!");
            }else if(qtdOPR.getSelectedItem().toString().equals("Selecionar")){
                JOptionPane.showMessageDialog(null, "Indique entrada ou saida do produto alterado!");
            }else if (lote.length() < 4 || lote.length() > 12) {
                JOptionPane.showMessageDialog(null, "Lote digitado é inválido!");
            }else if(qtd.length()!=0){
                JOptionPane.showMessageDialog(null, "Campo quantidade contém valor inválido!");
            }else if ((Integer.parseInt(quantidade))>qtd_tbl & qtdOPR.getSelectedIndex()==2) {
                JOptionPane.showMessageDialog(null, "Operação de saida inválida!");
            } else {
                String confirmar = vencimento.replaceAll("[^0-9]+", "");
                String dia = confirmar.substring(0, 2);
                String mes = confirmar.substring(2, 4);
                String ano = confirmar.substring(4, 8);
                String vencFormt = ano + "-" + mes + "-" + dia;

                EstoqueDAO estoqueDAO = new EstoqueDAO();
                EstoqueDTO estoqueDTO = new EstoqueDTO();
                estoqueDTO.setLote(lote);
                ResultSet rdao = estoqueDAO.pegarId(estoqueDTO);
                try {
                    if (rdao.next()) {
                        String lotes = rdao.getString(4);
                        String idConf = rdao.getString(1);
                        double idConf2 = Double.parseDouble(idConf);
                        if (lotes.equals(lote)) {
                            if (recId == idConf2) {
                                teste = 1;
                            } else {
                                JOptionPane.showMessageDialog(null, "Lote já cadastrado!");
                                teste = 2;
                            }
                        }
                    }
                } catch (SQLException erro) {
                    JOptionPane.showMessageDialog(null, erro);
                }
                if (produto.equals(tabelaProdutos.getValueAt(linha, 1)) & categoria.equals(tabelaProdutos.getValueAt(linha, 2)) & lote.equals(tabelaProdutos.getValueAt(linha, 3)) & vencimento.equals(tabelaProdutos.getValueAt(linha, 4)) & quantidade.equals(qtdNaLinha) & preco.equals(tabelaProdutos.getValueAt(linha, 6))) {
                    JOptionPane.showMessageDialog(null, "Nenhuma alteração foi efetuada!");
                } else if (teste == 1) {
                    String pgm;
                    if (preco.replaceAll("[0-9]", "").length() < 0) {
                        JOptionPane.showMessageDialog(null, "Campo valor inválido!");
                    } else {
                        pgm=preco;
                        Date dataHoraAtual = new Date();
                        String data2 = new SimpleDateFormat("yyyy-MM-dd").format(dataHoraAtual);
                        String hora = new SimpleDateFormat("HH:mm:ss").format(dataHoraAtual);

                        String dBanco = data2 + " " + hora;
                        int n;
                        if(qtdOPR.getSelectedIndex()==1){
                            n=qtd_tbl+(Integer.parseInt(quantidade));
                        }else{
                            n=qtd_tbl-(Integer.parseInt(quantidade));
                        }
                        if(qtdOPR.getSelectedIndex()==1){
                            estoqueDTO.setOperacao("entrada");
                        }else{
                            estoqueDTO.setOperacao("saida");
                        }
                        estoqueDTO.setCategoria(categoria);
                        estoqueDTO.setLote(lote);
                        estoqueDTO.setPreco(pgm);
                        estoqueDTO.setProduto(produto);
                        estoqueDTO.setValor(quantidade);
                        estoqueDTO.setQuantidade(n);
                        estoqueDTO.setVencimento(vencFormt);
                        estoqueDTO.setData_cadastro(dBanco);
                        estoqueDTO.setId_produto(recId);
                        estoqueDTO.setId_p_tbl((double) ids);

                        estoqueDAO.alterarProduto(estoqueDTO);
                        estoqueDAO.oprEstoque(estoqueDTO);

                        JOptionPane.showMessageDialog(null, "Produto alterado com sucesso!");

                        Opcoes.setSelectedIndex(0);
                        FiltrarEstoque();
                        LimparCampos();
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um produto da tabela para alterar!");
        }

    }

    private void FiltrarEstoque() {
        String filtrarpor = Opcoes.getSelectedItem().toString();
        String pesquisa = txtPesquisar.getText();
        try {
            EstoqueDTO estqDTO = new EstoqueDTO();
            EstoqueDAO estqDAO = new EstoqueDAO();
            estqDTO.setFiltro(filtrarpor);
            estqDTO.setTxtPesq(pesquisa);
            DefaultTableModel model = (DefaultTableModel) tabelaProdutos.getModel();
            model.setNumRows(0);
            ArrayList<EstoqueDTO> listar = estqDAO.FiltrarEstoque(estqDTO);
            tabelaProdutos.getColumnModel().getColumn(0).setPreferredWidth(30);
            tabelaProdutos.getColumnModel().getColumn(1).setPreferredWidth(202);
            tabelaProdutos.getColumnModel().getColumn(2).setPreferredWidth(70);
            tabelaProdutos.getColumnModel().getColumn(3).setPreferredWidth(75);
            tabelaProdutos.getColumnModel().getColumn(4).setPreferredWidth(60);
            tabelaProdutos.getColumnModel().getColumn(5).setPreferredWidth(40);
            tabelaProdutos.getColumnModel().getColumn(6).setPreferredWidth(50);

            tabelaProdutos.getColumnModel().getColumn(7).setMinWidth(0);
            tabelaProdutos.getColumnModel().getColumn(7).setMaxWidth(0);
            tabelaProdutos.getColumnModel().getColumn(7).setPreferredWidth(0);

            for (int n = 0; n < listar.size(); n++) {
                model.addRow(new Object[]{
                    listar.get(n).getId_produto(),
                    listar.get(n).getProduto(),
                    listar.get(n).getCategoria(),
                    listar.get(n).getLote(),
                    listar.get(n).getVencimento(),
                    listar.get(n).getQuantidade(),
                    listar.get(n).getPreco()
                });

            }
            if (permitirE.isSelected() == true) {
                tabelaProdutos.getColumnModel().getColumn(7).setMinWidth(20);
                tabelaProdutos.getColumnModel().getColumn(7).setMaxWidth(20);
                tabelaProdutos.getColumnModel().getColumn(7).setPreferredWidth(20);
            } else {
                tabelaProdutos.getColumnModel().getColumn(7).setMinWidth(0);
                tabelaProdutos.getColumnModel().getColumn(7).setMaxWidth(0);
                tabelaProdutos.getColumnModel().getColumn(7).setPreferredWidth(0);
            }
        } catch (Exception erro) {
            JOptionPane.showMessageDialog(null, erro);
        }

        DefaultTableCellRenderer tableCellRenderer = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                String data2 = String.valueOf(tabelaProdutos.getValueAt(row, 4));
                String confirmar2 = data2.replaceAll("[^0-9]+", "");
                String dia2 = confirmar2.substring(0, 2);
                String mes2 = confirmar2.substring(2, 4);
                String ano2 = confirmar2.substring(4, 8);
                String dataTable2 = dia2 + "-" + mes2 + "-" + ano2;
                Date sistemaT = null;
                Date dataHoraAtual = new Date();
                String datar = new SimpleDateFormat("dd-MM-yyyy").format(dataHoraAtual);
                SimpleDateFormat data = new SimpleDateFormat("dd-MM-yyyy");

                Font ft = new Font("Arial", Font.BOLD, 12);

                try {
                    Date sistemaD = data.parse(datar);
                    try {
                        sistemaT = data.parse(dataTable2);
                        if (sistemaT.before(sistemaD) || sistemaT.compareTo(sistemaD) == 0) {
                            comp.setForeground(Color.RED);
                            comp.setFont(ft);
                        } else {
                            comp.setForeground(Color.BLACK);
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(Object.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(Object.class.getName()).log(Level.SEVERE, null, ex);
                }
                return comp;
            }
        };
        for (int i = 0; i < tabelaProdutos.getRowCount(); i++) {
            String data2 = String.valueOf(tabelaProdutos.getValueAt(i, 4));
            tabelaProdutos.getColumnModel().getColumn(4).setCellRenderer(tableCellRenderer);
        }
        DefaultTableCellRenderer tableCellRenderer2 = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component comp2 = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                Font ft = new Font("Segoe UI", Font.BOLD, 12);
                int qtds = (int) tabelaProdutos.getValueAt(row, 5);
                if (qtds == 0) {
                    comp2.setForeground(Color.RED);
                    comp2.setFont(ft);
                } else {
                    comp2.setForeground(Color.BLACK);
                }
                return comp2;
            }
        };
        for (int i = 0; i < tabelaProdutos.getRowCount(); i++) {
            String data2 = String.valueOf(tabelaProdutos.getValueAt(i, 4));
            tabelaProdutos.getColumnModel().getColumn(5).setCellRenderer(tableCellRenderer2);
        }
    }

    private void selecionarLinha() {
        if (permitirA.isSelected() == true) {
            tabelaProdutos.setRowSelectionAllowed(true);
        } else {
            tabelaProdutos.setRowSelectionAllowed(false);
        }
    }

    private void LimparCampos() {
        txtNomeProduto.setText(null);
        txtLote.setText(null);
        txtVencimento.setText(null);
        txtValor.setText(null);
        txtQuantidade.setText(null);
        novaQTD.setText(null);
        txtCategoria.setSelectedIndex(0);
        qtdOPR.setSelectedIndex(0);
    }

    private void MandarLinha() {
        alterar.setEnabled(true);

        int linha = tabelaProdutos.getSelectedRow();
        Object produto = tabelaProdutos.getValueAt(linha, 1);
        Object categoria = tabelaProdutos.getValueAt(linha, 2);
        Object lote = tabelaProdutos.getValueAt(linha, 3);
        Object vencimento = tabelaProdutos.getValueAt(linha, 4);
        int quantidade = (int) tabelaProdutos.getValueAt(linha, 5);
        String preco = (String) tabelaProdutos.getValueAt(linha, 6);
        preco=preco.replace("R$","");

        txtNomeProduto.setText((String) produto);
        txtLote.setText((String) lote);
        txtVencimento.setText((String) vencimento);
        txtQuantidade.setText(String.valueOf(quantidade));
        txtValor.setText(preco);

        if (categoria.equals("Secos")) {
            txtCategoria.setSelectedIndex(1);
        } else if (categoria.equals("Carnes e Frios")) {
            txtCategoria.setSelectedIndex(2);
        } else if (categoria.equals("Bebidas")) {
            txtCategoria.setSelectedIndex(3);
        } else if (categoria.equals("Molhos")) {
            txtCategoria.setSelectedIndex(4);
        } else if(categoria.equals("Sorveteria")){
            txtCategoria.setSelectedIndex(5);
        }else{
            txtCategoria.setSelectedIndex(6);
        }

    }

    private void exclusao() {
        int confirmar = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja remover estes produtos?", "Atenção!", JOptionPane.YES_NO_OPTION);
        if (confirmar == JOptionPane.YES_OPTION) {
            Object[] check = new Object[tabelaProdutos.getRowCount()];
            String[] ids = new String[tabelaProdutos.getRowCount()];
            for (int i = tabelaProdutos.getRowCount() - 1; i >= 0; i--) {
                check[i] = String.valueOf(tabelaProdutos.getValueAt(i, 7));
                if (tabelaProdutos.getValueAt(i, 7) == null) {
                    ids[i] = "desmarcado";
                } else if ((boolean) tabelaProdutos.getValueAt(i, 7) == false) {
                    ids[i] = "desmarcado";
                } else {
                    ids[i] = String.valueOf(tabelaProdutos.getValueAt(i, 0));
                }
                if (ids[i].equals("desmarcado")) {
                } else {
                    ((DefaultTableModel) tabelaProdutos.getModel()).removeRow(i);
                    EstoqueDAO eDAO = new EstoqueDAO();
                    EstoqueDTO eDTO = new EstoqueDTO();
                    eDTO.setId_produto(Double.parseDouble(ids[i]));
                    eDAO.excluir(eDTO);
                }
            }
            tabelaProdutos.getColumnModel().getColumn(7).setMinWidth(20);
            tabelaProdutos.getColumnModel().getColumn(7).setMaxWidth(20);
            tabelaProdutos.getColumnModel().getColumn(7).setPreferredWidth(20);

        }
    }
}
