/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tela;

import DAO.UsuarioDAO;
import DTO.UsuarioDTO;
import java.awt.Color;
import static java.awt.Color.gray;
import static java.awt.Color.red;
import static java.awt.Color.white;
import java.util.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.Normalizer.Form;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.management.Query.value;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author jaine
 */
public class Cadastro extends javax.swing.JFrame {

    /**
     * Creates new form Cadastro
     */
    public Cadastro() {
        initComponents();
        jLabel11.setText("CADASTRAR FUNCIONÁRIO");
        cadastre.setEnabled(true);
        alterar.setEnabled(false);
        excluir.setEnabled(false);

        tabelaUsuario.setRowSelectionAllowed(false);

        Filtrar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtFuncao = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        cadastre = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtUser = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        excluir = new javax.swing.JButton();
        alterar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaUsuario = new javax.swing.JTable();
        txtSenha = new javax.swing.JPasswordField();
        permitirA = new javax.swing.JRadioButton();
        permitirE = new javax.swing.JRadioButton();
        txtCPF = new javax.swing.JFormattedTextField();
        txtAdmissao = new javax.swing.JFormattedTextField();
        Opcoes = new javax.swing.JComboBox<>();
        txtPesquisar = new javax.swing.JFormattedTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Usuário");

        jButton2.setText("(X) SAIR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Controle e Cadastro de Funcionários");
        setMinimumSize(new java.awt.Dimension(1330, 640));
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 0, 0));
        jPanel1.setLayout(null);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/famintos.png"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 40, 1310, 50);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Senha");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(280, 450, 240, 28);

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Data de Admissão");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(280, 230, 220, 28);

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Função");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(280, 340, 240, 28);

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });
        jPanel1.add(txtEmail);
        txtEmail.setBounds(40, 380, 220, 30);

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Nome Completo");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(40, 230, 190, 28);

        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });
        jPanel1.add(txtNome);
        txtNome.setBounds(40, 270, 220, 30);

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Email");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(40, 340, 190, 28);

        txtFuncao.setEditable(false);
        txtFuncao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar", "Gerente", "Chef", "Cozinheiro", "Garçom", "Administrador" }));
        txtFuncao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFuncaoActionPerformed(evt);
            }
        });
        jPanel1.add(txtFuncao);
        txtFuncao.setBounds(280, 380, 220, 30);

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("CPF");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(40, 450, 190, 28);

        cadastre.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        cadastre.setText("CADASTRAR");
        cadastre.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                cadastreAncestorRemoved(evt);
            }
        });
        cadastre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastreActionPerformed(evt);
            }
        });
        jPanel1.add(cadastre);
        cadastre.setBounds(240, 550, 130, 27);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText(" Conectado como");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(0, 100, 640, 30);

        txtUser.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtUser.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(txtUser);
        txtUser.setBounds(650, 100, 660, 30);

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("_________________________________");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(0, 160, 550, 28);

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("CADASTRAR FUNCIONÁRIO");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(0, 150, 550, 28);

        excluir.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        excluir.setText("EXCLUIR CADASTROS");
        excluir.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                excluirAncestorRemoved(evt);
            }
        });
        excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirActionPerformed(evt);
            }
        });
        jPanel1.add(excluir);
        excluir.setBounds(1070, 550, 210, 27);

        alterar.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        alterar.setText("ALTERAR ");
        alterar.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                alterarAncestorRemoved(evt);
            }
        });
        alterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarActionPerformed(evt);
            }
        });
        jPanel1.add(alterar);
        alterar.setBounds(380, 550, 130, 27);

        tabelaUsuario = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                Boolean b = false;
                if(columnIndex == 6){
                    b = true;
                    return true;
                }else{
                    b = false;
                }
                return b;

            }
        };
        tabelaUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Função", "Email", "Admissão", "CPF", "ID", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaUsuario.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabelaUsuario.setFocusable(false);
        tabelaUsuario.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabelaUsuario.getTableHeader().setResizingAllowed(false);
        tabelaUsuario.getTableHeader().setReorderingAllowed(false);
        tabelaUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaUsuarioMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelaUsuario);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(532, 182, 760, 360);
        jPanel1.add(txtSenha);
        txtSenha.setBounds(280, 490, 220, 30);

        permitirA.setBackground(new java.awt.Color(255, 0, 0));
        permitirA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        permitirA.setForeground(new java.awt.Color(255, 255, 255));
        permitirA.setText("Permitir edição de cadastros");
        permitirA.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                permitirAItemStateChanged(evt);
            }
        });
        jPanel1.add(permitirA);
        permitirA.setBounds(580, 550, 220, 30);

        permitirE.setBackground(new java.awt.Color(255, 0, 0));
        permitirE.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        permitirE.setForeground(new java.awt.Color(255, 255, 255));
        permitirE.setText("Permitir exclusão de cadastros");
        permitirE.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                permitirEItemStateChanged(evt);
            }
        });
        jPanel1.add(permitirE);
        permitirE.setBounds(810, 550, 220, 22);

        try {
            txtCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jPanel1.add(txtCPF);
        txtCPF.setBounds(40, 490, 220, 30);

        try {
            txtAdmissao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jPanel1.add(txtAdmissao);
        txtAdmissao.setBounds(280, 270, 220, 30);

        Opcoes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Não filtrar", "Nome", "Função", "Ano de Admissão", "CPF" }));
        Opcoes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpcoesItemStateChanged(evt);
            }
        });
        Opcoes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpcoesMouseClicked(evt);
            }
        });
        jPanel1.add(Opcoes);
        Opcoes.setBounds(990, 140, 140, 30);

        txtPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisarActionPerformed(evt);
            }
        });
        txtPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPesquisarKeyTyped(evt);
            }
        });
        jPanel1.add(txtPesquisar);
        txtPesquisar.setBounds(1140, 140, 150, 30);

        jButton1.setText("MENU");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(1130, 10, 70, 23);

        jButton3.setText("SAIR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(1220, 10, 70, 23);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1330, 610);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeActionPerformed

    private void txtFuncaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFuncaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFuncaoActionPerformed

    private void cadastreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastreActionPerformed
        String nome, senha, email, funcao, cpf, admissao;
        nome = txtNome.getText();
        senha = String.valueOf(txtSenha.getPassword());
        email = txtEmail.getText();
        funcao = txtFuncao.getSelectedItem().toString();
        cpf = txtCPF.getText();
        admissao = txtAdmissao.getText();

        String vEmail;

        int teste = 1;

        int validEmail = email.length();
        if (validEmail < 4) {
            vEmail = "erro";
        } else {
            int contaEmail = validEmail - 4;
            vEmail = email.substring(contaEmail, validEmail);
        }

        String cpfF2 = cpf.replaceAll("[^0-9]+", "");
        String confirmcpf = cpf.replace(".", "");
        String confirmscpf2 = confirmcpf.replace("-", "");
        String cpf2 = confirmscpf2.replaceAll("[0-9]+", "");
        String confirm = admissao.replace("/", "");
        String confirms = confirm.replace("-", "");
        String confirmar2 = confirms.replaceAll("[0-9]+", "");
        String confirmar = confirms.replaceAll("[^0-9]+", "");

        String checkNome = nome.replaceAll("[A-Za-záéíóúçâêîôûãõÁÉÍÓÚÂÊÎÔÛÃÕÇ ]", "");

        if ((nome.isEmpty()) || (senha.isEmpty()) || (email.isEmpty()) || (funcao.isEmpty() || (cpf.isEmpty()) || (admissao.isEmpty()))) {
            JOptionPane.showMessageDialog(null, "Preencha todos os campos obrigatórios!");
        } else if (checkNome.length() != 0 || nome.contains("Gerente") || nome.contains("Chef") || nome.contains("Cozinheiro") || nome.contains("Garçom") || nome.contains("Administrador")) {
            JOptionPane.showMessageDialog(null, "Nome inválido!");
        } else if (cpf2.length() != 0 || cpfF2.length() != 11) {
            JOptionPane.showMessageDialog(null, "CPF digitado é inválido!");
        } else if (!email.contains("@") || !email.contains(".com") || !vEmail.equals(".com")) {
            JOptionPane.showMessageDialog(null, "Email digitado é inválido!");
        } else if (confirmar2.length() != 0 || confirmar.length() != 8) {
            JOptionPane.showMessageDialog(null, "Data digitada é inválida!");
        } else {
            Date dataHoraAtual = new Date();
            String data = new SimpleDateFormat("dd-MM-yyyy").format(dataHoraAtual);
            String data2 = new SimpleDateFormat("yyyy-MM-dd").format(dataHoraAtual);
            String hora = new SimpleDateFormat("HH:mm:ss").format(dataHoraAtual);

            String dBanco = data2 + " " + hora;

            String anoSistema = data.substring(6, 10);
            int anosSistema = Integer.parseInt(anoSistema);

            String cpfForm1 = cpfF2.substring(0, 3);
            String cpfForm2 = cpfF2.substring(3, 6);
            String cpfForm3 = cpfF2.substring(6, 9);
            String cpfForm4 = cpfF2.substring(9, 11);
            String cpfedit = cpfForm1 + "." + cpfForm2 + "." + cpfForm3 + "-" + cpfForm4;

            String dia = confirmar.substring(0, 2);
            String mes = confirmar.substring(2, 4);
            String ano = confirmar.substring(4, 8);
            String addata = ano + "-" + mes + "-" + dia;
            String dataTable = dia + "/" + mes + "/" + ano;

            if (dia.length() != 2 || mes.length() != 2 || ano.length() != 4) {
                JOptionPane.showMessageDialog(null, "Data digitada é inválida!");
            } else {

                int dias = Integer.parseInt(dia);
                int meses = Integer.parseInt(mes);
                int anos = Integer.parseInt(ano);
                if (meses < 0 || meses > 12 || dias < 0 || dias > 31 || anos > anosSistema) {
                    JOptionPane.showMessageDialog(null, "Data digitada é inválida!");
                } else if (senha.length() < 8 || senha.length() > 15) {
                    JOptionPane.showMessageDialog(null, "Digite um senha que contenha entre 8 e 15 dígitos!");
                } else if (funcao.equals("Selecionar")) {
                    JOptionPane.showMessageDialog(null, "Você não selecionou uma função!");
                } else if (funcao.equals("Administrador") & !txtUser.getText().contains("Administrador")) {
                    JOptionPane.showMessageDialog(null, "A opção administrador está desabilitada!");
                } else {
                    UsuarioDTO objusuarioDTO = new UsuarioDTO();
                    objusuarioDTO.setEmail(email);
                    objusuarioDTO.setCpf(cpfedit);

                    UsuarioDAO objusuarioDAO = new UsuarioDAO();
                    ResultSet rsuserdao = objusuarioDAO.checarDados(objusuarioDTO);
                    try {
                        if (rsuserdao.next()) {
                            String emails = rsuserdao.getString(5);
                            String cpfs = rsuserdao.getString(7);
                            if (cpfs.equals(cpfedit) || emails.equals(email)) {
                                JOptionPane.showMessageDialog(null, "CPF ou Email já cadastrados!");
                                teste = 2;
                            }
                        }
                    } catch (SQLException erro) {
                        JOptionPane.showMessageDialog(null, erro);
                    }

                    if (teste == 1) {
                        nome = txtNome.getText();
                        senha = String.valueOf(txtSenha.getPassword());
                        email = txtEmail.getText();
                        funcao = txtFuncao.getSelectedItem().toString();
                        objusuarioDTO.setEmail(email);
                        objusuarioDTO.setCpf(cpfedit);
                        objusuarioDTO.setNome(nome);
                        objusuarioDTO.setSenha(senha);
                        objusuarioDTO.setFuncao(funcao);
                        objusuarioDTO.setAdmissao(addata);
                        objusuarioDTO.setData_cadastro(dBanco);
                        objusuarioDAO.cadastrarUser(objusuarioDTO);
                        double ids = objusuarioDTO.getId_usuario();
                        JOptionPane.showMessageDialog(null, "Usuário adicionado com sucesso!");
                        LimparCampos();
                        Opcoes.setSelectedIndex(0);
                        Filtrar();

                    }

                }

            }
        }


    }//GEN-LAST:event_cadastreActionPerformed

    private void cadastreAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_cadastreAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_cadastreAncestorRemoved

    private void excluirAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_excluirAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_excluirAncestorRemoved

    private void excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirActionPerformed
        exclusao();
    }//GEN-LAST:event_excluirActionPerformed

    private void alterarAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_alterarAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_alterarAncestorRemoved

    private void alterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarActionPerformed
        int linha = tabelaUsuario.getSelectedRow();

        if (linha != -1) {
            Object ids = tabelaUsuario.getValueAt(linha, 5);
            double recId = (double) ids;

            String nome, senha, email, funcao, cpf, admissao;
            nome = txtNome.getText();
            senha = String.valueOf(txtSenha.getPassword());
            email = txtEmail.getText();
            funcao = txtFuncao.getSelectedItem().toString();
            cpf = txtCPF.getText();
            admissao = txtAdmissao.getText();

            String vEmail;
            int teste = 1;

            int validEmail = email.length();
            if (validEmail < 4) {
                vEmail = "erro";
            } else {
                int contaEmail = validEmail - 4;
                vEmail = email.substring(contaEmail, validEmail);
            }

            String cpfF2 = cpf.replaceAll("[^0-9]+", "");
            String confirmcpf = cpf.replace(".", "");
            String confirmscpf2 = confirmcpf.replace("-", "");
            String cpf2 = confirmscpf2.replaceAll("[0-9]+", "");
            String confirm = admissao.replace("/", "");
            String confirms = confirm.replace("-", "");
            String confirmar2 = confirms.replaceAll("[0-9]+", "");
            String confirmar = confirms.replaceAll("[^0-9]+", "");
            String checkNome = nome.replaceAll("[A-Za-záéíóúçâêîôûãõÁÉÍÓÚÂÊÎÔÛÃÕÇ ]", "");

            if ((nome.isEmpty()) || (senha.isEmpty()) || (email.isEmpty()) || (funcao.isEmpty() || (cpf.isEmpty()) || (admissao.isEmpty()))) {
                JOptionPane.showMessageDialog(null, "Preencha todos os campos obrigatórios!");
            } else if (checkNome.length() != 0 || nome.contains("Gerente") || nome.contains("Chef") || nome.contains("Cozinheiro") || nome.contains("Garçom")) {
                JOptionPane.showMessageDialog(null, "Nome inválido!");
            } else if (cpf2.length() != 0 || cpfF2.length() != 11) {
                JOptionPane.showMessageDialog(null, "CPF digitado é inválido!");
            } else if (!email.contains("@") || !email.contains(".com") || !vEmail.equals(".com")) {
                JOptionPane.showMessageDialog(null, "Email digitado é inválido!");
            } else if (confirmar2.length() != 0 || confirmar.length() != 8) {
                JOptionPane.showMessageDialog(null, "Data digitada é inválida!");
            } else {
                Date dataHoraAtual = new Date();
                String data = new SimpleDateFormat("dd-MM-yyyy").format(dataHoraAtual);
                String data2 = new SimpleDateFormat("yyyy-MM-dd").format(dataHoraAtual);
                String hora = new SimpleDateFormat("HH:mm:ss").format(dataHoraAtual);

                String dBanco = data2 + " " + hora;

                String anoSistema = data.substring(6, 10);
                int anosSistema = Integer.parseInt(anoSistema);

                String cpfForm1 = cpfF2.substring(0, 3);
                String cpfForm2 = cpfF2.substring(3, 6);
                String cpfForm3 = cpfF2.substring(6, 9);
                String cpfForm4 = cpfF2.substring(9, 11);
                String cpfedit = cpfForm1 + "." + cpfForm2 + "." + cpfForm3 + "-" + cpfForm4;

                String dia = confirmar.substring(0, 2);
                String mes = confirmar.substring(2, 4);
                String ano = confirmar.substring(4, 8);
                String addata = ano + "-" + mes + "-" + dia;
                String dataTable = dia + "/" + mes + "/" + ano;

                if (dia.length() != 2 || mes.length() != 2 || ano.length() != 4) {
                    JOptionPane.showMessageDialog(null, "Data digitada é inválida!");
                } else {

                    int dias = Integer.parseInt(dia);
                    int meses = Integer.parseInt(mes);
                    int anos = Integer.parseInt(ano);
                    if (meses < 0 || meses > 12 || dias < 0 || dias > 31 || anos > anosSistema) {
                        JOptionPane.showMessageDialog(null, "Data digitada é inválida!");
                    } else if (senha.length() < 8 || senha.length() > 15) {
                        JOptionPane.showMessageDialog(null, "Digite um senha que contenha entre 8 e 15 dígitos!");
                    } else if (funcao.equals("Selecionar")) {
                        JOptionPane.showMessageDialog(null, "Você não selecionou uma função!");
                    } else if (funcao.equals("Administrador") & !txtUser.getText().contains("Administrador")) {
                        JOptionPane.showMessageDialog(null, "A opção administrador está desabilitada!");
                    } else {
                        UsuarioDTO obDTO = new UsuarioDTO();
                        obDTO.setEmail(email);
                        obDTO.setCpf(cpfedit);

                        UsuarioDAO obDAO = new UsuarioDAO();
                        ResultSet rdao = obDAO.checarDados(obDTO);
                        try {
                            if (rdao.next()) {
                                String emails = rdao.getString(5);
                                String cpfs = rdao.getString(7);
                                String idConf = rdao.getString(3);
                                double idConf2 = Double.parseDouble(idConf);
                                if (cpfs.equals(cpfedit) || emails.equals(email)) {
                                    if (recId == idConf2) {
                                        teste = 1;
                                    } else {
                                        JOptionPane.showMessageDialog(null, "CPF ou Email já cadastrados!");
                                        teste = 2;
                                    }
                                }
                            }
                        } catch (SQLException erro) {
                            JOptionPane.showMessageDialog(null, erro);
                        }

                        if (teste == 1) {
                            Object Nome = tabelaUsuario.getValueAt(linha, 0);
                            Object Email = tabelaUsuario.getValueAt(linha, 2);
                            Object Cpf = tabelaUsuario.getValueAt(linha, 4);
                            Object Funcao = tabelaUsuario.getValueAt(linha, 1);
                            Object Admissao = tabelaUsuario.getValueAt(linha, 3);
                            UsuarioDTO mst = new UsuarioDTO();
                            mst.setId_usuario((double) ids);
                            UsuarioDAO mstDAO = new UsuarioDAO();
                            ResultSet rsS = mstDAO.Exibir(mst);

                            try {
                                if (rsS.next()) {
                                    String senhas = rsS.getString("senha");
                                    if (txtNome.getText().equals(Nome) && txtEmail.getText().equals(Email) && txtCPF.getText().equals(Cpf) && txtFuncao.getSelectedItem().equals(Funcao) && txtAdmissao.getText().equals(Admissao) && String.valueOf(txtSenha.getPassword()).equals(senhas)) {
                                        JOptionPane.showMessageDialog(null, "Nenhuma modificação foi efetuada.");
                                    } else {
                                        nome = txtNome.getText();
                                        senha = String.valueOf(txtSenha.getPassword());
                                        email = txtEmail.getText();
                                        funcao = txtFuncao.getSelectedItem().toString();
                                        obDTO.setEmail(email);
                                        obDTO.setCpf(cpfedit);
                                        obDTO.setNome(nome);
                                        obDTO.setSenha(senha);
                                        obDTO.setFuncao(funcao);
                                        obDTO.setAdmissao(addata);
                                        obDTO.setData_cadastro(dBanco);
                                        obDTO.setId_usuario(recId);
                                        obDAO.alterarUser(obDTO);
                                        JOptionPane.showMessageDialog(null, "Usuário alterado com sucesso!");
                                        LimparCampos();
                                        Opcoes.setSelectedIndex(0);
                                        Filtrar();

                                    }
                                }
                            } catch (SQLException erro) {
                                JOptionPane.showMessageDialog(null, erro);
                            }
                        }

                    }

                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione algum funcionário na tabela!");
        }
    }//GEN-LAST:event_alterarActionPerformed

    private void tabelaUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaUsuarioMouseClicked
        boolean estado = permitirA.isSelected();
        if (estado == true) {
            Atualizar();
        }

    }//GEN-LAST:event_tabelaUsuarioMouseClicked

    private void permitirAItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_permitirAItemStateChanged
        boolean estado = permitirA.isSelected();
        if (estado == true) {
            jLabel11.setText("ALTERAR CADASTRO");
            permitirE.setSelected(false);
            cadastre.setEnabled(false);
            excluir.setEnabled(false);
            alterar.setEnabled(true);
            tabelaUsuario.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            selecionarLinha();
            LimparCampos();
        } else if (estado == false) {
            jLabel11.setText("CADASTRAR FUNCIONÁRIO");
            excluir.setEnabled(false);
            alterar.setEnabled(false);
            cadastre.setEnabled(true);
            selecionarLinha();
            LimparCampos();
        }
    }//GEN-LAST:event_permitirAItemStateChanged

    private void permitirEItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_permitirEItemStateChanged
        boolean estado = permitirE.isSelected();
        if (estado == true) {

            tabelaUsuario.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            permitirA.setSelected(false);
            cadastre.setEnabled(false);
            alterar.setEnabled(false);
            excluir.setEnabled(true);
            selecionarLinha();
            LimparCampos();
            tabelaUsuario.getColumnModel().getColumn(6).setMinWidth(20);
            tabelaUsuario.getColumnModel().getColumn(6).setMaxWidth(20);
            tabelaUsuario.getColumnModel().getColumn(6).setPreferredWidth(20);
        } else if (estado == false) {
            tabelaUsuario.getColumnModel().getColumn(6).setMinWidth(0);
            tabelaUsuario.getColumnModel().getColumn(6).setMaxWidth(0);
            tabelaUsuario.getColumnModel().getColumn(6).setPreferredWidth(0);
            excluir.setEnabled(false);
            alterar.setEnabled(false);
            cadastre.setEnabled(true);
            for (int n = 0; n < tabelaUsuario.getRowCount(); n++) {
                tabelaUsuario.setValueAt(false, n, 6);
            }
            selecionarLinha();
            LimparCampos();
        }
    }//GEN-LAST:event_permitirEItemStateChanged

    private void OpcoesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpcoesMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_OpcoesMouseClicked

    private void OpcoesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpcoesItemStateChanged
        MaskFormatter ms;
        if (Opcoes.getSelectedItem().toString().equals("Não filtrar")) {
            txtPesquisar.setFormatterFactory(new DefaultFormatterFactory(null));
            txtPesquisar.setText("");
            Filtrar();
        } else if (Opcoes.getSelectedItem().toString().equals("CPF")) {
            try {
                ms = new MaskFormatter("###.###.###-##");
                txtPesquisar.setFormatterFactory(new DefaultFormatterFactory(ms));
            } catch (ParseException ex) {
                Logger.getLogger(Cadastro.class.getName()).log(Level.SEVERE, null, ex);
            }
            txtPesquisar.setText("");
        } else {
            txtPesquisar.setFormatterFactory(new DefaultFormatterFactory(null));
            txtPesquisar.setText("");
        }
    }//GEN-LAST:event_OpcoesItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String Nome = txtUser.getText();
        Menu mn = new Menu();
        mn.txtUsuario.setText(Nome);
        mn.setVisible(true);
        mn.chamar();
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisarActionPerformed

    private void txtPesquisarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarKeyTyped
        String pesquisa = txtPesquisar.getText();
        Filtrar();
    }//GEN-LAST:event_txtPesquisarKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cadastro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Opcoes;
    public javax.swing.JButton alterar;
    private javax.swing.ButtonGroup buttonGroup1;
    public javax.swing.JButton cadastre;
    public javax.swing.JButton excluir;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton permitirA;
    private javax.swing.JRadioButton permitirE;
    private javax.swing.JTable tabelaUsuario;
    private javax.swing.JFormattedTextField txtAdmissao;
    private javax.swing.JFormattedTextField txtCPF;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JComboBox<String> txtFuncao;
    private javax.swing.JTextField txtNome;
    private javax.swing.JFormattedTextField txtPesquisar;
    private javax.swing.JPasswordField txtSenha;
    public javax.swing.JLabel txtUser;
    // End of variables declaration//GEN-END:variables

    private void Atualizar() {
        alterar.setEnabled(true);
        //String cpf, nome, email, funcao, admissao;

        int linha = tabelaUsuario.getSelectedRow();
        Object ids = tabelaUsuario.getValueAt(linha, 5);
        Object Nome = tabelaUsuario.getValueAt(linha, 0);
        Object Email = tabelaUsuario.getValueAt(linha, 2);
        Object Cpf = tabelaUsuario.getValueAt(linha, 4);
        Object Funcao = tabelaUsuario.getValueAt(linha, 1);
        Object Admissao = tabelaUsuario.getValueAt(linha, 3);

        txtNome.setText((String) Nome);
        txtCPF.setText((String) Cpf);
        txtEmail.setText((String) Email);
        txtAdmissao.setText((String) Admissao);

        if (Funcao.equals("Gerente")) {
            txtFuncao.setSelectedIndex(1);
        } else if (Funcao.equals("Chef")) {
            txtFuncao.setSelectedIndex(2);
        } else if (Funcao.equals("Cozinheiro")) {
            txtFuncao.setSelectedIndex(3);
        } else {
            txtFuncao.setSelectedIndex(4);
        }

        UsuarioDTO mst = new UsuarioDTO();
        mst.setId_usuario((double) ids);
        UsuarioDAO mstDAO = new UsuarioDAO();
        ResultSet rsS = mstDAO.Exibir(mst);

        try {
            if (rsS.next()) {
                String senhas = rsS.getString("senha");
                txtSenha.setText(senhas);
            }
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, erro);
        }

    }

    private void LimparCampos() {
        txtNome.setText(null);
        txtSenha.setText(null);
        txtEmail.setText(null);
        txtCPF.setText(null);
        txtAdmissao.setText(null);
        txtFuncao.setSelectedIndex(0);
    }

    private void exclusao() {
        int confirmar = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja remover estes funcionários", "Atenção!", JOptionPane.YES_NO_OPTION);
        if (confirmar == JOptionPane.YES_OPTION) {
            Object[] check = new Object[tabelaUsuario.getRowCount()];
            String[] ids = new String[tabelaUsuario.getRowCount()];
            for (int i = tabelaUsuario.getRowCount() - 1; i >= 0; i--) {
                check[i] = String.valueOf(tabelaUsuario.getValueAt(i, 6));
                if (tabelaUsuario.getValueAt(i, 6) == null) {
                    ids[i] = "desmarcado";
                } else if ((boolean) tabelaUsuario.getValueAt(i, 6) == false) {
                    ids[i] = "desmarcado";
                } else {
                    ids[i] = String.valueOf(tabelaUsuario.getValueAt(i, 5));
                }
                if (ids[i].equals("desmarcado")) {
                } else {
                    ((DefaultTableModel) tabelaUsuario.getModel()).removeRow(i);
                    UsuarioDAO eDAO = new UsuarioDAO();
                    UsuarioDTO eDTO = new UsuarioDTO();
                    eDTO.setId_usuario(Double.parseDouble(ids[i]));
                    eDAO.excluir(eDTO);
                }
            }
            tabelaUsuario.getColumnModel().getColumn(6).setMinWidth(20);
            tabelaUsuario.getColumnModel().getColumn(6).setMaxWidth(20);
            tabelaUsuario.getColumnModel().getColumn(6).setPreferredWidth(20);

        }
    }

    private void selecionarLinha() {
        if (permitirA.isSelected() == true) {
            tabelaUsuario.setRowSelectionAllowed(true);
        } else {
            tabelaUsuario.setRowSelectionAllowed(false);
        }
    }

    private void Filtrar() {
        String filtrarpor = Opcoes.getSelectedItem().toString();
        String pesquisa = txtPesquisar.getText();
        try {
            UsuarioDTO filDTO = new UsuarioDTO();
            UsuarioDAO objsDAO = new UsuarioDAO();
            filDTO.setFiltro(filtrarpor);
            filDTO.setTxtPesq(pesquisa);
            DefaultTableModel model = (DefaultTableModel) tabelaUsuario.getModel();
            model.setNumRows(0);
            ArrayList<UsuarioDTO> listar = objsDAO.PesquisarFiltro(filDTO);
            tabelaUsuario.getColumnModel().getColumn(0).setPreferredWidth(202);
            tabelaUsuario.getColumnModel().getColumn(1).setPreferredWidth(82);
            tabelaUsuario.getColumnModel().getColumn(2).setPreferredWidth(202);
            tabelaUsuario.getColumnModel().getColumn(3).setPreferredWidth(88);
            tabelaUsuario.getColumnModel().getColumn(4).setPreferredWidth(110);
            tabelaUsuario.getColumnModel().getColumn(5).setPreferredWidth(50);
            tabelaUsuario.getColumnModel().getColumn(6).setMinWidth(0);
            tabelaUsuario.getColumnModel().getColumn(6).setMaxWidth(0);
            tabelaUsuario.getColumnModel().getColumn(6).setPreferredWidth(0);

            for (int n = 0; n < listar.size(); n++) {
                model.addRow(new Object[]{
                    listar.get(n).getNome(),
                    listar.get(n).getFuncao(),
                    listar.get(n).getEmail(),
                    listar.get(n).getAdmissao(),
                    listar.get(n).getCpf(),
                    listar.get(n).getId_usuario()
                });
            }
            if (permitirE.isSelected() == true) {
                tabelaUsuario.getColumnModel().getColumn(6).setMinWidth(20);
                tabelaUsuario.getColumnModel().getColumn(6).setMaxWidth(20);
                tabelaUsuario.getColumnModel().getColumn(6).setPreferredWidth(20);
            } else {
                tabelaUsuario.getColumnModel().getColumn(6).setMinWidth(0);
                tabelaUsuario.getColumnModel().getColumn(6).setMaxWidth(0);
                tabelaUsuario.getColumnModel().getColumn(6).setPreferredWidth(0);
            }
        } catch (Exception erro) {
            JOptionPane.showMessageDialog(null, erro);
        }
    }
}
