/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tela;

import DAO.CardapioDAO;
import DAO.EstoqueDAO;
import DTO.CardapioDTO;
import DTO.EstoqueDTO;
import static com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory.propertyName;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user3
 */
public class PratosnCardapio extends javax.swing.JFrame {

    /**
     * Creates new form PratosnCardapio
     */
    public PratosnCardapio() {
        initComponents();
        linkft.setVisible(false);
        FiltrarProdutos();
        alterar.setEnabled(false);
        excluir.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtQuantidade = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtNomeProduto = new javax.swing.JTextField();
        txtCategoria = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        adicionar = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtUser = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        excluir = new javax.swing.JButton();
        alterar = new javax.swing.JButton();
        permitirA = new javax.swing.JRadioButton();
        permitirE = new javax.swing.JRadioButton();
        Opcoes = new javax.swing.JComboBox<>();
        txtPesquisar = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaProdutos = new javax.swing.JTable();
        txtValor = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        fotoP = new javax.swing.JLabel();
        linkft = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cardápio");

        jPanel1.setBackground(new java.awt.Color(255, 0, 0));
        jPanel1.setLayout(null);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/famintos.png"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 40, 1310, 50);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Quantidade");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(280, 220, 240, 28);

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Valor (und)");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(280, 460, 240, 28);

        txtQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantidadeActionPerformed(evt);
            }
        });
        jPanel1.add(txtQuantidade);
        txtQuantidade.setBounds(280, 260, 220, 30);

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Produto");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(40, 220, 190, 28);

        txtNomeProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeProdutoActionPerformed(evt);
            }
        });
        jPanel1.add(txtNomeProduto);
        txtNomeProduto.setBounds(40, 260, 220, 30);

        txtCategoria.setEditable(false);
        txtCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar", "Lanches", "Bebidas", "Sobremesas", "Sorveteria", "Aperitivos" }));
        txtCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCategoriaActionPerformed(evt);
            }
        });
        jPanel1.add(txtCategoria);
        txtCategoria.setBounds(280, 380, 220, 30);

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Categoria");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(280, 350, 190, 28);

        adicionar.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        adicionar.setText("ADICIONAR");
        adicionar.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                adicionarAncestorRemoved(evt);
            }
        });
        adicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarActionPerformed(evt);
            }
        });
        jPanel1.add(adicionar);
        adicionar.setBounds(240, 550, 130, 27);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText(" Conectado como");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(0, 100, 640, 30);

        txtUser.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtUser.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(txtUser);
        txtUser.setBounds(650, 100, 660, 30);

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("_________________________________");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(0, 160, 550, 28);

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("ADICIONAR AO CARDÁPIO");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(0, 150, 550, 28);

        excluir.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        excluir.setText("EXCLUIR PRODUTOS");
        excluir.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                excluirAncestorRemoved(evt);
            }
        });
        excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirActionPerformed(evt);
            }
        });
        jPanel1.add(excluir);
        excluir.setBounds(1070, 540, 210, 27);

        alterar.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        alterar.setText("ALTERAR ");
        alterar.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                alterarAncestorRemoved(evt);
            }
        });
        alterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarActionPerformed(evt);
            }
        });
        jPanel1.add(alterar);
        alterar.setBounds(390, 550, 130, 27);

        permitirA.setBackground(new java.awt.Color(255, 0, 0));
        permitirA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        permitirA.setForeground(new java.awt.Color(255, 255, 255));
        permitirA.setText("Permitir edição de produtos");
        permitirA.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                permitirAItemStateChanged(evt);
            }
        });
        jPanel1.add(permitirA);
        permitirA.setBounds(580, 540, 220, 30);

        permitirE.setBackground(new java.awt.Color(255, 0, 0));
        permitirE.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        permitirE.setForeground(new java.awt.Color(255, 255, 255));
        permitirE.setText("Permitir exclusão de produtos");
        permitirE.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                permitirEItemStateChanged(evt);
            }
        });
        jPanel1.add(permitirE);
        permitirE.setBounds(810, 540, 220, 22);

        Opcoes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Não filtrar", "Quantidade", "Produto", "Categoria" }));
        Opcoes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpcoesItemStateChanged(evt);
            }
        });
        Opcoes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpcoesMouseClicked(evt);
            }
        });
        jPanel1.add(Opcoes);
        Opcoes.setBounds(1010, 140, 140, 30);

        txtPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPesquisarKeyTyped(evt);
            }
        });
        jPanel1.add(txtPesquisar);
        txtPesquisar.setBounds(1160, 140, 150, 30);

        tabelaProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Cod. Produto", "Imagem", "Produto", "Categoria", "Quantidade", "Preço", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaProdutos.setFocusable(false);
        tabelaProdutos.setRowHeight(120);
        tabelaProdutos.setRowSelectionAllowed(false);
        tabelaProdutos.getTableHeader().setResizingAllowed(false);
        tabelaProdutos.getTableHeader().setReorderingAllowed(false);
        tabelaProdutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaProdutosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaProdutos);
        if (tabelaProdutos.getColumnModel().getColumnCount() > 0) {
            tabelaProdutos.getColumnModel().getColumn(0).setMinWidth(50);
            tabelaProdutos.getColumnModel().getColumn(0).setPreferredWidth(50);
            tabelaProdutos.getColumnModel().getColumn(0).setMaxWidth(50);
            tabelaProdutos.getColumnModel().getColumn(1).setResizable(false);
            tabelaProdutos.getColumnModel().getColumn(2).setResizable(false);
            tabelaProdutos.getColumnModel().getColumn(3).setMinWidth(90);
            tabelaProdutos.getColumnModel().getColumn(3).setPreferredWidth(90);
            tabelaProdutos.getColumnModel().getColumn(3).setMaxWidth(90);
            tabelaProdutos.getColumnModel().getColumn(4).setMinWidth(80);
            tabelaProdutos.getColumnModel().getColumn(4).setPreferredWidth(80);
            tabelaProdutos.getColumnModel().getColumn(4).setMaxWidth(80);
            tabelaProdutos.getColumnModel().getColumn(5).setMinWidth(80);
            tabelaProdutos.getColumnModel().getColumn(5).setPreferredWidth(80);
            tabelaProdutos.getColumnModel().getColumn(5).setMaxWidth(80);
            tabelaProdutos.getColumnModel().getColumn(6).setResizable(false);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(522, 182, 790, 340);
        jPanel1.add(txtValor);
        txtValor.setBounds(280, 500, 220, 30);

        jButton1.setText("MENU");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(1140, 10, 70, 23);

        jButton3.setText("SAIR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(1220, 10, 80, 23);

        jButton2.setText("SELECIONAR IMAGEM");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(40, 500, 220, 30);

        fotoP.setBackground(new java.awt.Color(255, 255, 255));
        fotoP.setOpaque(true);
        fotoP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fotoPMouseClicked(evt);
            }
        });
        jPanel1.add(fotoP);
        fotoP.setBounds(40, 310, 220, 190);

        linkft.setEnabled(false);
        jPanel1.add(linkft);
        linkft.setBounds(40, 500, 220, 0);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1341, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantidadeActionPerformed

    private void txtNomeProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeProdutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeProdutoActionPerformed

    private void txtCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCategoriaActionPerformed

    private void adicionarAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_adicionarAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_adicionarAncestorRemoved

    private void adicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarActionPerformed
        Adicionar();
    }//GEN-LAST:event_adicionarActionPerformed

    private void excluirAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_excluirAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_excluirAncestorRemoved

    private void excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirActionPerformed
        exclusao();
    }//GEN-LAST:event_excluirActionPerformed

    private void alterarAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_alterarAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_alterarAncestorRemoved

    private void alterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarActionPerformed
        Alterar();
    }//GEN-LAST:event_alterarActionPerformed

    private void permitirAItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_permitirAItemStateChanged
        boolean estado = permitirA.isSelected();
        if (estado == true) {
            jLabel11.setText("ALTERAR NO CARDÁPIO");
            permitirE.setSelected(false);
            adicionar.setEnabled(false);
            excluir.setEnabled(false);
            alterar.setEnabled(true);
            tabelaProdutos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            selecionarLinha();
            LimparCampos();
        } else if (estado == false) {
            jLabel11.setText("ADICIONAR AO CARDÁPIO");
            excluir.setEnabled(false);
            alterar.setEnabled(false);
            adicionar.setEnabled(true);
            selecionarLinha();
            LimparCampos();
        }
    }//GEN-LAST:event_permitirAItemStateChanged

    private void permitirEItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_permitirEItemStateChanged
        boolean estado = permitirE.isSelected();
        if (estado == true) {
            tabelaProdutos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            permitirA.setSelected(false);
            adicionar.setEnabled(false);
            alterar.setEnabled(false);
            excluir.setEnabled(true);
            selecionarLinha();
            LimparCampos();
            tabelaProdutos.getColumnModel().getColumn(6).setMinWidth(20);
            tabelaProdutos.getColumnModel().getColumn(6).setMaxWidth(20);
            tabelaProdutos.getColumnModel().getColumn(6).setPreferredWidth(20);
        } else if (estado == false) {
            tabelaProdutos.getColumnModel().getColumn(6).setMinWidth(0);
            tabelaProdutos.getColumnModel().getColumn(6).setMaxWidth(0);
            tabelaProdutos.getColumnModel().getColumn(6).setPreferredWidth(0);
            excluir.setEnabled(false);
            alterar.setEnabled(false);
            adicionar.setEnabled(true);
            for (int n = 0; n < tabelaProdutos.getRowCount(); n++) {
                tabelaProdutos.setValueAt(false, n, 6);
            }
            selecionarLinha();
            LimparCampos();

        }
    }//GEN-LAST:event_permitirEItemStateChanged

    private void OpcoesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpcoesItemStateChanged
        if (Opcoes.getSelectedItem().toString().equals("Não filtrar") || Opcoes.getSelectedItem().toString().equals("Quantidade")) {
            txtPesquisar.setText("");
            FiltrarProdutos();
        }
    }//GEN-LAST:event_OpcoesItemStateChanged

    private void OpcoesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpcoesMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_OpcoesMouseClicked

    private void tabelaProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaProdutosMouseClicked
        boolean estado = permitirA.isSelected();
        if (estado == true) {
            if (tabelaProdutos.getSelectedRow() != -1) {
                MandarLinha();
            }
        }
    }//GEN-LAST:event_tabelaProdutosMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String Nome = txtUser.getText();
        Menu mn = new Menu();
        mn.txtUsuario.setText(Nome);
        mn.setVisible(true);
        mn.chamar();
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser escolher = new JFileChooser();
        fotoP.setIcon(null);
        File f;
        escolher.setFileFilter(new FileNameExtensionFilter("Image files", "png", "jpg", "jpeg"));
        escolher.setAcceptAllFileFilterUsed(false);
        escolher.showOpenDialog(null);
        f = escolher.getSelectedFile();
        String foto = f.getAbsolutePath();
        ImageIcon icone = new ImageIcon(f.getPath());
        Image imagem = icone.getImage();
        Image newimg = imagem.getScaledInstance(220, 220, java.awt.Image.SCALE_SMOOTH);
        ImageIcon fig = new ImageIcon(newimg);
        fotoP.setIcon(fig);
        linkft.setText(foto);

        BufferedImage imagem2;
        try {
            imagem2 = ImageIO.read(new File(foto));
            if (imagem2 == null) {
                linkft.setText("nulo");
                JOptionPane.showMessageDialog(null, "Imagem não compativel!");
            }
        } catch (IOException ex) {
            Logger.getLogger(PratosnCardapio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtPesquisarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarKeyTyped
        if (Opcoes.getSelectedItem().toString().equals("Não filtrar") || Opcoes.getSelectedItem().toString().equals("Quantidade")) {
            FiltrarProdutos();
        } else {
            FiltrarProdutos();
        }
    }//GEN-LAST:event_txtPesquisarKeyTyped

    private void fotoPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fotoPMouseClicked

    }//GEN-LAST:event_fotoPMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PratosnCardapio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PratosnCardapio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PratosnCardapio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PratosnCardapio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PratosnCardapio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Opcoes;
    public javax.swing.JButton adicionar;
    public javax.swing.JButton alterar;
    public javax.swing.JButton excluir;
    private javax.swing.JLabel fotoP;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel linkft;
    private javax.swing.JRadioButton permitirA;
    private javax.swing.JRadioButton permitirE;
    public javax.swing.JTable tabelaProdutos;
    private javax.swing.JComboBox<String> txtCategoria;
    private javax.swing.JTextField txtNomeProduto;
    private javax.swing.JFormattedTextField txtPesquisar;
    private javax.swing.JTextField txtQuantidade;
    public javax.swing.JLabel txtUser;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables

    private void Adicionar() {
        String nm_comida, vl_preco, img_comida, data_cadastro, cd_categoria, qt_estoque;
        nm_comida = txtNomeProduto.getText();
        cd_categoria = txtCategoria.getSelectedItem().toString();
        vl_preco = txtValor.getText();
        qt_estoque = txtQuantidade.getText();
        img_comida = linkft.getText();

        String prc = vl_preco.replaceAll("[0-9,]", "");
        String qtd = qt_estoque.replaceAll("[0-9]", "");

        if ((nm_comida.isEmpty()) || (cd_categoria.isEmpty()) || (vl_preco.isEmpty()) || (qt_estoque.isEmpty() || img_comida.isEmpty()) || img_comida.equals("nulo")) {
            JOptionPane.showMessageDialog(null, "Preencha todos os campos obrigatórios!");
        } else {
            if (cd_categoria.equals("Selecionar")) {
                JOptionPane.showMessageDialog(null, "Selecione uma categoria!");
            } else {
                if (qtd.length() != 0) {
                    JOptionPane.showMessageDialog(null, "Campo quantidade contém valor inválido!");
                } else if (prc.length() != 0) {
                    JOptionPane.showMessageDialog(null, "Campo valor contém carctere inválido!");
                } else {
                    String pgm;
                    pgm = vl_preco.replaceAll(",", ".");

                    Date dataHoraAtual = new Date();
                    String data2 = new SimpleDateFormat("yyyy-MM-dd").format(dataHoraAtual);
                    String hora = new SimpleDateFormat("HH:mm:ss").format(dataHoraAtual);

                    String dBanco = data2 + " " + hora;

                    CardapioDAO cdpDAO = new CardapioDAO();
                    CardapioDTO cdpDTO = new CardapioDTO();

                    cdpDTO.setNm_categoria(cd_categoria);
                    cdpDTO.setVl_preco(pgm);
                    cdpDTO.setNm_comida(nm_comida);
                    cdpDTO.setQt_estoque(Integer.valueOf(qt_estoque));
                    cdpDTO.setData_cadastro(dBanco);

                    FileInputStream origem;
                    FileOutputStream destino;

                    FileChannel fcOrigem;
                    FileChannel fcDestino;
                    try {
                        origem = new FileInputStream(img_comida);
                        System.out.println(origem);
                        try {
                            destino = new FileOutputStream("C:\\xampp\\htdocs\\FamintosWeb\\produtos_img\\" + origem + ".jpg");
                            fcOrigem = origem.getChannel();
                            fcDestino = destino.getChannel();
                            try {
                                fcOrigem.transferTo(0, fcOrigem.size(), fcDestino);
                                String destinoLet = String.valueOf(origem);
                                String destinoMod = destinoLet.replaceAll("[^a-zZ-Z1-9 ]", "");

                                try {
                                    cdpDTO.setImg_comida(destinoMod);
                                    origem.close();
                                    destino.close();
                                    File arquivo = new File("C:\\xampp\\htdocs\\FamintosWeb\\produtos_img\\" + origem + ".jpg");
                                    arquivo.renameTo(new File("C:\\xampp\\htdocs\\FamintosWeb\\produtos_img\\" + destinoMod + ".jpg"));
                                    cdpDAO.adicionarProduto(cdpDTO);
                                    JOptionPane.showMessageDialog(null, "Produto adicionado com sucesso!");
                                    LimparCampos();
                                    Opcoes.setSelectedIndex(0);
                                    FiltrarProdutos();

                                } catch (IOException ex1) {
                                    Logger.getLogger(PratosnCardapio.class.getName()).log(Level.SEVERE, null, ex1);
                                }
                            } catch (IOException ex) {
                                Logger.getLogger(PratosnCardapio.class.getName()).log(Level.SEVERE, null, ex);

                            }

                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(PratosnCardapio.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(PratosnCardapio.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }

    private void FiltrarProdutos() {
        String filtrarpor = Opcoes.getSelectedItem().toString();
        String pesquisa = txtPesquisar.getText();
        try {
            CardapioDTO cdDTO = new CardapioDTO();
            CardapioDAO cdDAO = new CardapioDAO();
            cdDTO.setFiltro(filtrarpor);
            cdDTO.setTxtPesq(pesquisa);
            DefaultTableModel model = (DefaultTableModel) tabelaProdutos.getModel();
            model.setNumRows(0);
            ArrayList<CardapioDTO> listar = cdDAO.FiltrarEstoque(cdDTO);

            for (int n = 0; n < listar.size(); n++) {
                model.addRow(new Object[]{
                    listar.get(n).getCd_comida(),
                    listar.get(n).getImg_comida(),
                    listar.get(n).getNm_comida(),
                    listar.get(n).getNm_categoria(),
                    listar.get(n).getQt_estoque(),
                    listar.get(n).getVl_preco()
                });

            }
            tabelaProdutos.getColumnModel().getColumn(1).setMinWidth(120);
            tabelaProdutos.getColumnModel().getColumn(1).setMaxWidth(120);
            tabelaProdutos.getColumnModel().getColumn(1).setPreferredWidth(120);
            if (permitirE.isSelected() == true) {
                tabelaProdutos.getColumnModel().getColumn(6).setMinWidth(20);
                tabelaProdutos.getColumnModel().getColumn(6).setMaxWidth(20);
                tabelaProdutos.getColumnModel().getColumn(6).setPreferredWidth(20);
            } else {
                tabelaProdutos.getColumnModel().getColumn(6).setMinWidth(0);
                tabelaProdutos.getColumnModel().getColumn(6).setMaxWidth(0);
                tabelaProdutos.getColumnModel().getColumn(6).setPreferredWidth(0);
            }
        } catch (Exception erro) {
            JOptionPane.showMessageDialog(null, erro);
        }

        DefaultTableCellRenderer tableCellRenderer = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                String icone1 = (String) tabelaProdutos.getValueAt(row, 1);
                ImageIcon icone = new ImageIcon(icone1);
                Image imagem = icone.getImage();
                Image newimg = imagem.getScaledInstance(120, 120, java.awt.Image.SCALE_SMOOTH);
                ImageIcon fig = new ImageIcon(newimg);
                setIcon(fig);
                setText("");
                return comp;
            }
        };

        for (int i = 0; i < tabelaProdutos.getRowCount(); i++) {
            String ex = String.valueOf(tabelaProdutos.getValueAt(i, 1));
            tabelaProdutos.getColumnModel().getColumn(1).setCellRenderer(tableCellRenderer);

        }

        DefaultTableCellRenderer tableCellRenderer2 = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component comp2 = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                Font ft = new Font("Segoe UI", Font.BOLD, 12);
                int qtds = (int) tabelaProdutos.getValueAt(row, 4);
                if (qtds == 0) {
                    comp2.setForeground(Color.RED);
                    comp2.setFont(ft);
                } else {
                    comp2.setForeground(Color.BLACK);
                }
                return comp2;
            }
        };
        for (int i = 0; i < tabelaProdutos.getRowCount(); i++) {
            String data2 = String.valueOf(tabelaProdutos.getValueAt(i, 4));
            tabelaProdutos.getColumnModel().getColumn(4).setCellRenderer(tableCellRenderer2);
        }
    }

    private void selecionarLinha() {
        if (permitirA.isSelected() == true) {
            tabelaProdutos.setRowSelectionAllowed(true);
        } else {
            tabelaProdutos.setRowSelectionAllowed(false);
        }
    }

    private void LimparCampos() {
        txtNomeProduto.setText(null);
        fotoP.setIcon(null);
        txtValor.setText(null);
        txtQuantidade.setText(null);
        txtCategoria.setSelectedIndex(0);
        linkft.setText("");
    }

    private void MandarLinha() {
        alterar.setEnabled(true);

        int linha = tabelaProdutos.getSelectedRow();
        Object nm_comida, vl_preco, img_comida, data_cadastro, nm_categoria, qt_estoque, cd_comida;
        nm_comida = tabelaProdutos.getValueAt(linha, 2);
        nm_categoria = tabelaProdutos.getValueAt(linha, 3);
        vl_preco = tabelaProdutos.getValueAt(linha, 5);
        qt_estoque = tabelaProdutos.getValueAt(linha, 4);
        img_comida = tabelaProdutos.getValueAt(linha, 1);
        cd_comida = tabelaProdutos.getValueAt(linha, 0);

        txtNomeProduto.setText((String) nm_comida);
        String vl = (String) vl_preco;
        vl = vl.replaceAll("[R$]", "");
        vl = vl.replaceAll("\\.", ",");
        txtValor.setText((String) vl);
        txtQuantidade.setText(String.valueOf(qt_estoque));

        if (nm_categoria.equals("Lanches")) {
            txtCategoria.setSelectedIndex(1);
        } else if (nm_categoria.equals("Bebidas")) {
            txtCategoria.setSelectedIndex(2);
        } else if (nm_categoria.equals("Sobremesas")) {
            txtCategoria.setSelectedIndex(3);
        } else if (nm_categoria.equals("Sorveteria")) {
            txtCategoria.setSelectedIndex(4);
        } else {
            txtCategoria.setSelectedIndex(5);
        }
        CardapioDTO cds = new CardapioDTO();
        cds.setCd_comida((int) cd_comida);
        CardapioDAO cdsDAO = new CardapioDAO();
        ResultSet rsS = cdsDAO.Exibir(cds);

        try {
            if (rsS.next()) {
                String imgs = rsS.getString("img_comida");
                linkft.setText("C:\\xampp\\htdocs\\FamintosWeb\\produtos_img\\" + imgs + ".jpg");
                String icone1 = "C:\\xampp\\htdocs\\FamintosWeb\\produtos_img\\" + imgs + ".jpg";
                ImageIcon icone = new ImageIcon(icone1);
                Image imagem = icone.getImage();
                Image newimg = imagem.getScaledInstance(220, 220, java.awt.Image.SCALE_SMOOTH);
                ImageIcon fig = new ImageIcon(newimg);
                fotoP.setIcon(fig);
            }
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, erro);
        }
    }

    private void Alterar() {
        String nm_comida, vl_preco, img_comida, data_cadastro, cd_categoria, qtestoque, nm_categoria;
        nm_comida = txtNomeProduto.getText();
        cd_categoria = txtCategoria.getSelectedItem().toString();
        vl_preco = txtValor.getText();
        qtestoque = txtQuantidade.getText();
        img_comida = linkft.getText();

        String prc = vl_preco.replaceAll("[0-9,]", "");
        String qtd = qtestoque.replaceAll("[0-9]", "");
        int linha = tabelaProdutos.getSelectedRow();
        if (linha != -1) {
            String id = String.valueOf(tabelaProdutos.getValueAt(linha, 0));
            int ids = Integer.valueOf(id);
            if ((nm_comida.isEmpty()) || (cd_categoria.isEmpty()) || (vl_preco.isEmpty()) || (qtestoque.isEmpty() || img_comida.isEmpty())) {
                JOptionPane.showMessageDialog(null, "Preencha todos os campos obrigatórios!");
            } else {
                int linha2 = tabelaProdutos.getSelectedRow();
                String teste = "C:\\xampp\\htdocs\\FamintosWeb\\produtos_img\\" + tabelaProdutos.getValueAt(linha2, 1) + ".jpg";
                String vls = (String) tabelaProdutos.getValueAt(linha, 5);
                String vl = (String) vls;
                vl = vl.replaceAll("[R$]", "");
                vl = vl.replaceAll("\\.", ",");
                String comp = String.valueOf(tabelaProdutos.getValueAt(linha, 4));

                if (tabelaProdutos.getValueAt(linha, 2).equals(nm_comida) & tabelaProdutos.getValueAt(linha, 3).equals(cd_categoria) & vl.equals(vl_preco) & comp.equals(qtestoque) & teste.equals("C:\\xampp\\htdocs\\FamintosWeb\\produtos_img\\" + img_comida + ".jpg")) {
                    JOptionPane.showMessageDialog(null, "Nenhuma modificação foi efetuada!");
                } else if (cd_categoria.equals("Selecionar")) {
                    JOptionPane.showMessageDialog(null, "Selecione uma categoria!");
                } else {
                    if (qtd.length() != 0) {
                        JOptionPane.showMessageDialog(null, "Campo quantidade contém valor inválido!");
                    } else if (prc.length() != 0) {
                        JOptionPane.showMessageDialog(null, "Campo valor contém carctere inválido!");
                    } else {
                        String pgm;
                        pgm = vl_preco.replaceAll(",", ".");

                        Date dataHoraAtual = new Date();
                        String data2 = new SimpleDateFormat("yyyy-MM-dd").format(dataHoraAtual);
                        String hora = new SimpleDateFormat("HH:mm:ss").format(dataHoraAtual);

                        String dBanco = data2 + " " + hora;

                        CardapioDAO cdpDAO = new CardapioDAO();
                        CardapioDTO cdpDTO = new CardapioDTO();

                        cdpDTO.setNm_categoria(cd_categoria);
                        cdpDTO.setVl_preco(pgm);
                        cdpDTO.setNm_comida(nm_comida);
                        cdpDTO.setQt_estoque(Integer.valueOf(qtestoque));
                        cdpDTO.setData_cadastro(dBanco);

                        FileInputStream origem;
                        FileOutputStream destino;

                        FileChannel fcOrigem;
                        FileChannel fcDestino;

                        if (teste.equals("C:\\xampp\\htdocs\\FamintosWeb\\produtos_img\\" + img_comida + ".jpg")) {
                            String destinoMod1 = img_comida.replace("C:\\xampp\\htdocs\\FamintosWeb\\produtos_img\\", "");
                            String destinoMod2 = destinoMod1.replace(".jpg", "");
                            cdpDTO.setImg_comida(destinoMod2);
                            cdpDTO.setCd_comida(ids);
                            cdpDAO.altereProduto(cdpDTO);
                            JOptionPane.showMessageDialog(null, "Produto alterado com sucesso!");
                            LimparCampos();
                            Opcoes.setSelectedIndex(0);
                            FiltrarProdutos();
                        } else {
                            try {
                                origem = new FileInputStream(img_comida);
                                try {
                                    destino = new FileOutputStream("C:\\xampp\\htdocs\\FamintosWeb\\produtos_img\\" + origem + ".jpg");//onde irá ficar a copia do aquivo
                                    fcOrigem = origem.getChannel();
                                    fcDestino = destino.getChannel();
                                    try {
                                        fcOrigem.transferTo(0, fcOrigem.size(), fcDestino);
                                        String destinoLet = String.valueOf(origem);
                                        String destinoMod = destinoLet.replaceAll("[^a-zZ-Z1-9 ]", "");

                                        try {
                                            cdpDTO.setImg_comida(destinoMod);
                                            cdpDTO.setCd_comida(ids);
                                            origem.close();
                                            destino.close();
                                            File arquivo = new File("C:\\xampp\\htdocs\\FamintosWeb\\produtos_img\\" + origem + ".jpg");
                                            arquivo.renameTo(new File("C:\\xampp\\htdocs\\FamintosWeb\\produtos_img\\" + destinoMod + ".jpg"));
                                            cdpDAO.altereProduto(cdpDTO);
                                            JOptionPane.showMessageDialog(null, "Produto alterado com sucesso!");
                                            LimparCampos();
                                            Opcoes.setSelectedIndex(0);
                                            FiltrarProdutos();

                                        } catch (IOException ex1) {
                                            Logger.getLogger(PratosnCardapio.class.getName()).log(Level.SEVERE, null, ex1);
                                        }
                                    } catch (IOException ex) {
                                        Logger.getLogger(PratosnCardapio.class.getName()).log(Level.SEVERE, null, ex);

                                    }

                                } catch (FileNotFoundException ex) {
                                    Logger.getLogger(PratosnCardapio.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(PratosnCardapio.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um produto da tabela para alterar!");
        }
    }

    private void exclusao() {
        int confirmar = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja remover estes produtos?", "Atenção!", JOptionPane.YES_NO_OPTION);
        if (confirmar == JOptionPane.YES_OPTION) {
            Object[] check = new Object[tabelaProdutos.getRowCount()];
            String[] ids = new String[tabelaProdutos.getRowCount()];
            for (int i = tabelaProdutos.getRowCount() - 1; i >= 0; i--) {
                check[i] = String.valueOf(tabelaProdutos.getValueAt(i, 6));
                if (tabelaProdutos.getValueAt(i, 6) == null) {
                    ids[i] = "desmarcado";
                } else if ((boolean) tabelaProdutos.getValueAt(i, 6) == false) {
                    ids[i] = "desmarcado";
                } else {
                    ids[i] = String.valueOf(tabelaProdutos.getValueAt(i, 0));
                }
                if (ids[i].equals("desmarcado")) {
                } else {
                    String img_comida = (String) tabelaProdutos.getValueAt(i, 1);
                    Path path = Paths.get(img_comida);
                    try {
                        Files.delete(path);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    ((DefaultTableModel) tabelaProdutos.getModel()).removeRow(i);
                    CardapioDAO cdpsDAO = new CardapioDAO();
                    CardapioDTO cdpsDTO = new CardapioDTO();
                    cdpsDTO.setCd_comida(Integer.valueOf(ids[i]));
                    cdpsDAO.excluir(cdpsDTO);
                    

                    
                }
            }
            tabelaProdutos.getColumnModel().getColumn(6).setMinWidth(20);
            tabelaProdutos.getColumnModel().getColumn(6).setMaxWidth(20);
            tabelaProdutos.getColumnModel().getColumn(6).setPreferredWidth(20);

        }
    }
}
